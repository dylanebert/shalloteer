import fs from 'fs';
import path from 'path';

function generateComponentTypes(): string {
  return `// Auto-generated component prop types
// DO NOT EDIT - Generated by src/jsx/types/generate.ts

export type Vector2 = { x: number; y: number } | number | string;
export type Vector3 = { x: number; y: number; z: number } | number | string;
export type Quaternion = { x: number; y: number; z: number; w: number };
export type Color = string | number;

export interface TransformProps {
  pos?: Vector3;
  scale?: Vector3;
  euler?: Vector3;
  rot?: Quaternion;
}

export interface BodyProps {
  type?: 'dynamic' | 'fixed' | 'kinematic-position' | 'kinematic-velocity';
  pos?: Vector3;
  euler?: Vector3;
  mass?: number;
  linearDamping?: number;
  angularDamping?: number;
  gravityScale?: number;
  ccd?: boolean;
  lockRotX?: boolean;
  lockRotY?: boolean;
  lockRotZ?: boolean;
}

export interface ColliderProps {
  shape?: 'box' | 'sphere' | 'cylinder' | 'capsule' | 'cone' | 'torus' | 'plane';
  size?: Vector3;
  radius?: number;
  height?: number;
  restitution?: number;
  friction?: number;
  density?: number;
  sensor?: boolean;
  posOffset?: Vector3;
  rotOffset?: Quaternion;
}

export interface RendererProps {
  shape?: 'box' | 'sphere' | 'cylinder' | 'capsule' | 'cone' | 'torus' | 'plane';
  size?: Vector3;
  color?: Color;
  castShadow?: boolean;
  receiveShadow?: boolean;
  visible?: boolean;
}

export interface OrbitCameraProps {
  target?: number;
  distance?: number;
  minDistance?: number;
  maxDistance?: number;
  minPitch?: number;
  maxPitch?: number;
  targetPitch?: number;
  targetYaw?: number;
  currentPitch?: number;
  currentYaw?: number;
  currentDistance?: number;
  sensitivity?: number;
  smoothing?: number;
  smoothness?: number;
  offset?: Vector3;
  enabled?: boolean;
}

export interface PlayerProps {
  pos?: Vector3;
  speed?: number;
  jumpHeight?: number;
  rotationSpeed?: number;
  cameraSensitivity?: number;
  cameraZoomSensitivity?: number;
}

export interface CharacterControllerProps {
  offset?: number;
  maxSlope?: number;
  maxSlide?: number;
  snapDist?: number;
  autoStep?: boolean;
  maxStepHeight?: number;
  minStepWidth?: number;
  up?: Vector3;
}

export interface CharacterMovementProps {
  desiredVel?: Vector3;
  velocityY?: number;
  actualMove?: Vector3;
}

export interface InputStateProps {
  moveX?: number;
  moveY?: number;
  moveZ?: number;
  lookX?: number;
  lookY?: number;
  scrollDelta?: number;
  jump?: boolean;
  primaryAction?: boolean;
  secondaryAction?: boolean;
  leftMouse?: boolean;
  rightMouse?: boolean;
  middleMouse?: boolean;
}

export interface RespawnProps {
  pos?: Vector3;
  euler?: Vector3;
}

export interface TweenProps {
  target?: string;
  from?: number | string;
  to?: number | string;
  duration?: number;
  easing?: string;
  loop?: 'once' | 'loop' | 'ping-pong';
  children?: React.ReactNode;
}

export interface EntityProps {
  transform?: TransformProps | boolean;
  body?: BodyProps | boolean;
  collider?: ColliderProps | boolean;
  renderer?: RendererProps | boolean;
  orbitCamera?: OrbitCameraProps | boolean;
  player?: PlayerProps | boolean;
  characterController?: CharacterControllerProps | boolean;
  characterMovement?: CharacterMovementProps | boolean;
  inputState?: InputStateProps | boolean;
  respawn?: RespawnProps | boolean;
  parent?: { entity: number };
  pos?: Vector3;
  size?: Vector3;
  color?: Color;
  shape?: string;
  children?: React.ReactNode;
  [key: string]: any;
}

export interface StaticPartProps extends EntityProps {
  pos?: Vector3;
  shape?: 'box' | 'sphere' | 'cylinder' | 'capsule' | 'cone' | 'torus' | 'plane';
  size?: Vector3;
  color?: Color;
}

export interface DynamicPartProps extends EntityProps {
  pos?: Vector3;
  shape?: 'box' | 'sphere' | 'cylinder' | 'capsule' | 'cone' | 'torus' | 'plane';
  size?: Vector3;
  color?: Color;
  mass?: number;
}

export interface KinematicPartProps extends EntityProps {
  pos?: Vector3;
  shape?: 'box' | 'sphere' | 'cylinder' | 'capsule' | 'cone' | 'torus' | 'plane';
  size?: Vector3;
  color?: Color;
}

export interface CameraProps extends EntityProps {
  orbitCamera?: OrbitCameraProps | boolean;
}

export interface AmbientLightProps extends EntityProps {
  skyColor?: Color;
  groundColor?: Color;
  intensity?: number;
}

export interface DirectionalLightProps extends EntityProps {
  color?: Color;
  intensity?: number;
  direction?: Vector3;
  castShadow?: boolean;
  shadowMapSize?: number;
  distance?: number;
}

export interface LightProps extends EntityProps {
  // Combines ambient and directional light
  skyColor?: Color;
  groundColor?: Color;
  ambientIntensity?: number;
  directionalColor?: Color;
  directionalIntensity?: number;
  direction?: Vector3;
  castShadow?: boolean;
}

export interface WorldProps {
  canvas: string;
  sky?: Color;
  children?: React.ReactNode;
}

// JSX element type
export interface JSXElement {
  type: string | Function;
  props: Record<string, any>;
  children: JSXElement[];
}
`;
}

async function main() {
  const typesContent = generateComponentTypes();
  const outputPath = path.join(process.cwd(), 'src/jsx/types/components.d.ts');
  
  fs.writeFileSync(outputPath, typesContent);
  console.log(`âœ… Generated types at ${outputPath}`);
}

if (import.meta.main) {
  main().catch(console.error);
}